#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace C3.Domain.Repositories.Concrete.Sql
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="C3Comparison")]
	public partial class SqlComparisonDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertComparisonDataItem(ComparisonDataItem instance);
    partial void UpdateComparisonDataItem(ComparisonDataItem instance);
    partial void DeleteComparisonDataItem(ComparisonDataItem instance);
    partial void InsertSubscriberPatient(SubscriberPatient instance);
    partial void UpdateSubscriberPatient(SubscriberPatient instance);
    partial void DeleteSubscriberPatient(SubscriberPatient instance);
    partial void InsertComparisonDataItemMeasure(ComparisonDataItemMeasure instance);
    partial void UpdateComparisonDataItemMeasure(ComparisonDataItemMeasure instance);
    partial void DeleteComparisonDataItemMeasure(ComparisonDataItemMeasure instance);
    partial void InsertCondition(Condition instance);
    partial void UpdateCondition(Condition instance);
    partial void DeleteCondition(Condition instance);
    partial void InsertConditionPopulation(ConditionPopulation instance);
    partial void UpdateConditionPopulation(ConditionPopulation instance);
    partial void DeleteConditionPopulation(ConditionPopulation instance);
    partial void InsertContract(Contract instance);
    partial void UpdateContract(Contract instance);
    partial void DeleteContract(Contract instance);
    partial void InsertContractGroup(ContractGroup instance);
    partial void UpdateContractGroup(ContractGroup instance);
    partial void DeleteContractGroup(ContractGroup instance);
    partial void InsertContractGroupProgram(ContractGroupProgram instance);
    partial void UpdateContractGroupProgram(ContractGroupProgram instance);
    partial void DeleteContractGroupProgram(ContractGroupProgram instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertGroupSubscriber(GroupSubscriber instance);
    partial void UpdateGroupSubscriber(GroupSubscriber instance);
    partial void DeleteGroupSubscriber(GroupSubscriber instance);
    partial void InsertMeasure(Measure instance);
    partial void UpdateMeasure(Measure instance);
    partial void DeleteMeasure(Measure instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertPopulation(Population instance);
    partial void UpdatePopulation(Population instance);
    partial void DeletePopulation(Population instance);
    partial void InsertProgram(Program instance);
    partial void UpdateProgram(Program instance);
    partial void DeleteProgram(Program instance);
    partial void InsertProgramCondition(ProgramCondition instance);
    partial void UpdateProgramCondition(ProgramCondition instance);
    partial void DeleteProgramCondition(ProgramCondition instance);
    partial void InsertSubscriber(Subscriber instance);
    partial void UpdateSubscriber(Subscriber instance);
    partial void DeleteSubscriber(Subscriber instance);
    #endregion
		
		public SqlComparisonDataContext() : 
				base(global::Atmosphere.Core.Properties.Settings.Default.MockComparisonConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SqlComparisonDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SqlComparisonDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SqlComparisonDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SqlComparisonDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ComparisonDataItem> ComparisonDataItems
		{
			get
			{
				return this.GetTable<ComparisonDataItem>();
			}
		}
		
		public System.Data.Linq.Table<SubscriberPatient> SubscriberPatients
		{
			get
			{
				return this.GetTable<SubscriberPatient>();
			}
		}
		
		public System.Data.Linq.Table<ComparisonDataItemMeasure> ComparisonDataItemMeasures
		{
			get
			{
				return this.GetTable<ComparisonDataItemMeasure>();
			}
		}
		
		public System.Data.Linq.Table<Condition> Conditions
		{
			get
			{
				return this.GetTable<Condition>();
			}
		}
		
		public System.Data.Linq.Table<ConditionPopulation> ConditionPopulations
		{
			get
			{
				return this.GetTable<ConditionPopulation>();
			}
		}
		
		public System.Data.Linq.Table<Contract> Contracts
		{
			get
			{
				return this.GetTable<Contract>();
			}
		}
		
		public System.Data.Linq.Table<ContractGroup> ContractGroups
		{
			get
			{
				return this.GetTable<ContractGroup>();
			}
		}
		
		public System.Data.Linq.Table<ContractGroupProgram> ContractGroupPrograms
		{
			get
			{
				return this.GetTable<ContractGroupProgram>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<GroupSubscriber> GroupSubscribers
		{
			get
			{
				return this.GetTable<GroupSubscriber>();
			}
		}
		
		public System.Data.Linq.Table<Measure> Measures
		{
			get
			{
				return this.GetTable<Measure>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<Population> Populations
		{
			get
			{
				return this.GetTable<Population>();
			}
		}
		
		public System.Data.Linq.Table<Program> Programs
		{
			get
			{
				return this.GetTable<Program>();
			}
		}
		
		public System.Data.Linq.Table<ProgramCondition> ProgramConditions
		{
			get
			{
				return this.GetTable<ProgramCondition>();
			}
		}
		
		public System.Data.Linq.Table<Subscriber> Subscribers
		{
			get
			{
				return this.GetTable<Subscriber>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ComparisonDataItem")]
	public partial class ComparisonDataItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ComparisonDataItemId;
		
		private string _ItemGroupTypeName;
		
		private int _GroupId;
		
		private System.Nullable<int> _SubscriberId;
		
		private int _TotalPatients;
		
		private EntitySet<ComparisonDataItemMeasure> _ComparisonDataItemMeasures;
		
		private EntityRef<GroupSubscriber> _GroupSubscriber;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnComparisonDataItemIdChanging(int value);
    partial void OnComparisonDataItemIdChanged();
    partial void OnItemGroupTypeNameChanging(string value);
    partial void OnItemGroupTypeNameChanged();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    partial void OnSubscriberIdChanging(System.Nullable<int> value);
    partial void OnSubscriberIdChanged();
    partial void OnTotalPatientsChanging(int value);
    partial void OnTotalPatientsChanged();
    #endregion
		
		public ComparisonDataItem()
		{
			this._ComparisonDataItemMeasures = new EntitySet<ComparisonDataItemMeasure>(new Action<ComparisonDataItemMeasure>(this.attach_ComparisonDataItemMeasures), new Action<ComparisonDataItemMeasure>(this.detach_ComparisonDataItemMeasures));
			this._GroupSubscriber = default(EntityRef<GroupSubscriber>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComparisonDataItemId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ComparisonDataItemId
		{
			get
			{
				return this._ComparisonDataItemId;
			}
			set
			{
				if ((this._ComparisonDataItemId != value))
				{
					this.OnComparisonDataItemIdChanging(value);
					this.SendPropertyChanging();
					this._ComparisonDataItemId = value;
					this.SendPropertyChanged("ComparisonDataItemId");
					this.OnComparisonDataItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemGroupTypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ItemGroupTypeName
		{
			get
			{
				return this._ItemGroupTypeName;
			}
			set
			{
				if ((this._ItemGroupTypeName != value))
				{
					this.OnItemGroupTypeNameChanging(value);
					this.SendPropertyChanging();
					this._ItemGroupTypeName = value;
					this.SendPropertyChanged("ItemGroupTypeName");
					this.OnItemGroupTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int NOT NULL")]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._GroupSubscriber.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriberId", DbType="Int")]
		public System.Nullable<int> SubscriberId
		{
			get
			{
				return this._SubscriberId;
			}
			set
			{
				if ((this._SubscriberId != value))
				{
					this.OnSubscriberIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriberId = value;
					this.SendPropertyChanged("SubscriberId");
					this.OnSubscriberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPatients", DbType="Int NOT NULL")]
		public int TotalPatients
		{
			get
			{
				return this._TotalPatients;
			}
			set
			{
				if ((this._TotalPatients != value))
				{
					this.OnTotalPatientsChanging(value);
					this.SendPropertyChanging();
					this._TotalPatients = value;
					this.SendPropertyChanged("TotalPatients");
					this.OnTotalPatientsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ComparisonDataItem_ComparisonDataItemMeasure", Storage="_ComparisonDataItemMeasures", ThisKey="ComparisonDataItemId", OtherKey="ComparisonDataItemId")]
		public EntitySet<ComparisonDataItemMeasure> ComparisonDataItemMeasures
		{
			get
			{
				return this._ComparisonDataItemMeasures;
			}
			set
			{
				this._ComparisonDataItemMeasures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupSubscriber_ComparisonDataItem", Storage="_GroupSubscriber", ThisKey="GroupId", OtherKey="GroupSubscriberId", IsForeignKey=true)]
		public GroupSubscriber GroupSubscriber
		{
			get
			{
				return this._GroupSubscriber.Entity;
			}
			set
			{
				GroupSubscriber previousValue = this._GroupSubscriber.Entity;
				if (((previousValue != value) 
							|| (this._GroupSubscriber.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupSubscriber.Entity = null;
						previousValue.ComparisonDataItems.Remove(this);
					}
					this._GroupSubscriber.Entity = value;
					if ((value != null))
					{
						value.ComparisonDataItems.Add(this);
						this._GroupId = value.GroupSubscriberId;
					}
					else
					{
						this._GroupId = default(int);
					}
					this.SendPropertyChanged("GroupSubscriber");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ComparisonDataItemMeasures(ComparisonDataItemMeasure entity)
		{
			this.SendPropertyChanging();
			entity.ComparisonDataItem = this;
		}
		
		private void detach_ComparisonDataItemMeasures(ComparisonDataItemMeasure entity)
		{
			this.SendPropertyChanging();
			entity.ComparisonDataItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubscriberPatient")]
	public partial class SubscriberPatient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubscriberPatientId;
		
		private int _SubscriberId;
		
		private int _PatientId;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<Subscriber> _Subscriber;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubscriberPatientIdChanging(int value);
    partial void OnSubscriberPatientIdChanged();
    partial void OnSubscriberIdChanging(int value);
    partial void OnSubscriberIdChanged();
    partial void OnPatientIdChanging(int value);
    partial void OnPatientIdChanged();
    #endregion
		
		public SubscriberPatient()
		{
			this._Patient = default(EntityRef<Patient>);
			this._Subscriber = default(EntityRef<Subscriber>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriberPatientId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubscriberPatientId
		{
			get
			{
				return this._SubscriberPatientId;
			}
			set
			{
				if ((this._SubscriberPatientId != value))
				{
					this.OnSubscriberPatientIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriberPatientId = value;
					this.SendPropertyChanged("SubscriberPatientId");
					this.OnSubscriberPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriberId", DbType="Int NOT NULL")]
		public int SubscriberId
		{
			get
			{
				return this._SubscriberId;
			}
			set
			{
				if ((this._SubscriberId != value))
				{
					if (this._Subscriber.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubscriberIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriberId = value;
					this.SendPropertyChanged("SubscriberId");
					this.OnSubscriberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", DbType="Int NOT NULL")]
		public int PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_SubscriberPatient", Storage="_Patient", ThisKey="PatientId", OtherKey="PatientId", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.SubscriberPatients.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.SubscriberPatients.Add(this);
						this._PatientId = value.PatientId;
					}
					else
					{
						this._PatientId = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subscriber_SubscriberPatient", Storage="_Subscriber", ThisKey="SubscriberId", OtherKey="SubscriberId", IsForeignKey=true)]
		public Subscriber Subscriber
		{
			get
			{
				return this._Subscriber.Entity;
			}
			set
			{
				Subscriber previousValue = this._Subscriber.Entity;
				if (((previousValue != value) 
							|| (this._Subscriber.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subscriber.Entity = null;
						previousValue.SubscriberPatients.Remove(this);
					}
					this._Subscriber.Entity = value;
					if ((value != null))
					{
						value.SubscriberPatients.Add(this);
						this._SubscriberId = value.SubscriberId;
					}
					else
					{
						this._SubscriberId = default(int);
					}
					this.SendPropertyChanged("Subscriber");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ComparisonDataItemMeasure")]
	public partial class ComparisonDataItemMeasure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ComparisonDataItemMeasureId;
		
		private int _ComparisonDataItemId;
		
		private int _MeasureId;
		
		private int _Numerator;
		
		private int _Denominator;
		
		private int _Exclusions;
		
		private EntityRef<ComparisonDataItem> _ComparisonDataItem;
		
		private EntityRef<Measure> _Measure;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnComparisonDataItemMeasureIdChanging(int value);
    partial void OnComparisonDataItemMeasureIdChanged();
    partial void OnComparisonDataItemIdChanging(int value);
    partial void OnComparisonDataItemIdChanged();
    partial void OnMeasureIdChanging(int value);
    partial void OnMeasureIdChanged();
    partial void OnNumeratorChanging(int value);
    partial void OnNumeratorChanged();
    partial void OnDenominatorChanging(int value);
    partial void OnDenominatorChanged();
    partial void OnExclusionsChanging(int value);
    partial void OnExclusionsChanged();
    #endregion
		
		public ComparisonDataItemMeasure()
		{
			this._ComparisonDataItem = default(EntityRef<ComparisonDataItem>);
			this._Measure = default(EntityRef<Measure>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComparisonDataItemMeasureId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ComparisonDataItemMeasureId
		{
			get
			{
				return this._ComparisonDataItemMeasureId;
			}
			set
			{
				if ((this._ComparisonDataItemMeasureId != value))
				{
					this.OnComparisonDataItemMeasureIdChanging(value);
					this.SendPropertyChanging();
					this._ComparisonDataItemMeasureId = value;
					this.SendPropertyChanged("ComparisonDataItemMeasureId");
					this.OnComparisonDataItemMeasureIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComparisonDataItemId", DbType="Int NOT NULL")]
		public int ComparisonDataItemId
		{
			get
			{
				return this._ComparisonDataItemId;
			}
			set
			{
				if ((this._ComparisonDataItemId != value))
				{
					if (this._ComparisonDataItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComparisonDataItemIdChanging(value);
					this.SendPropertyChanging();
					this._ComparisonDataItemId = value;
					this.SendPropertyChanged("ComparisonDataItemId");
					this.OnComparisonDataItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasureId", DbType="Int NOT NULL")]
		public int MeasureId
		{
			get
			{
				return this._MeasureId;
			}
			set
			{
				if ((this._MeasureId != value))
				{
					if (this._Measure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasureIdChanging(value);
					this.SendPropertyChanging();
					this._MeasureId = value;
					this.SendPropertyChanged("MeasureId");
					this.OnMeasureIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Numerator", DbType="Int NOT NULL")]
		public int Numerator
		{
			get
			{
				return this._Numerator;
			}
			set
			{
				if ((this._Numerator != value))
				{
					this.OnNumeratorChanging(value);
					this.SendPropertyChanging();
					this._Numerator = value;
					this.SendPropertyChanged("Numerator");
					this.OnNumeratorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Denominator", DbType="Int NOT NULL")]
		public int Denominator
		{
			get
			{
				return this._Denominator;
			}
			set
			{
				if ((this._Denominator != value))
				{
					this.OnDenominatorChanging(value);
					this.SendPropertyChanging();
					this._Denominator = value;
					this.SendPropertyChanged("Denominator");
					this.OnDenominatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exclusions", DbType="Int NOT NULL")]
		public int Exclusions
		{
			get
			{
				return this._Exclusions;
			}
			set
			{
				if ((this._Exclusions != value))
				{
					this.OnExclusionsChanging(value);
					this.SendPropertyChanging();
					this._Exclusions = value;
					this.SendPropertyChanged("Exclusions");
					this.OnExclusionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ComparisonDataItem_ComparisonDataItemMeasure", Storage="_ComparisonDataItem", ThisKey="ComparisonDataItemId", OtherKey="ComparisonDataItemId", IsForeignKey=true)]
		public ComparisonDataItem ComparisonDataItem
		{
			get
			{
				return this._ComparisonDataItem.Entity;
			}
			set
			{
				ComparisonDataItem previousValue = this._ComparisonDataItem.Entity;
				if (((previousValue != value) 
							|| (this._ComparisonDataItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ComparisonDataItem.Entity = null;
						previousValue.ComparisonDataItemMeasures.Remove(this);
					}
					this._ComparisonDataItem.Entity = value;
					if ((value != null))
					{
						value.ComparisonDataItemMeasures.Add(this);
						this._ComparisonDataItemId = value.ComparisonDataItemId;
					}
					else
					{
						this._ComparisonDataItemId = default(int);
					}
					this.SendPropertyChanged("ComparisonDataItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Measure_ComparisonDataItemMeasure", Storage="_Measure", ThisKey="MeasureId", OtherKey="MeasureId", IsForeignKey=true)]
		public Measure Measure
		{
			get
			{
				return this._Measure.Entity;
			}
			set
			{
				Measure previousValue = this._Measure.Entity;
				if (((previousValue != value) 
							|| (this._Measure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Measure.Entity = null;
						previousValue.ComparisonDataItemMeasures.Remove(this);
					}
					this._Measure.Entity = value;
					if ((value != null))
					{
						value.ComparisonDataItemMeasures.Add(this);
						this._MeasureId = value.MeasureId;
					}
					else
					{
						this._MeasureId = default(int);
					}
					this.SendPropertyChanged("Measure");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Condition")]
	public partial class Condition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ConditionId;
		
		private string _ConditionName;
		
		private EntitySet<ConditionPopulation> _ConditionPopulations;
		
		private EntitySet<ProgramCondition> _ProgramConditions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConditionIdChanging(int value);
    partial void OnConditionIdChanged();
    partial void OnConditionNameChanging(string value);
    partial void OnConditionNameChanged();
    #endregion
		
		public Condition()
		{
			this._ConditionPopulations = new EntitySet<ConditionPopulation>(new Action<ConditionPopulation>(this.attach_ConditionPopulations), new Action<ConditionPopulation>(this.detach_ConditionPopulations));
			this._ProgramConditions = new EntitySet<ProgramCondition>(new Action<ProgramCondition>(this.attach_ProgramConditions), new Action<ProgramCondition>(this.detach_ProgramConditions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConditionId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ConditionId
		{
			get
			{
				return this._ConditionId;
			}
			set
			{
				if ((this._ConditionId != value))
				{
					this.OnConditionIdChanging(value);
					this.SendPropertyChanging();
					this._ConditionId = value;
					this.SendPropertyChanged("ConditionId");
					this.OnConditionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConditionName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ConditionName
		{
			get
			{
				return this._ConditionName;
			}
			set
			{
				if ((this._ConditionName != value))
				{
					this.OnConditionNameChanging(value);
					this.SendPropertyChanging();
					this._ConditionName = value;
					this.SendPropertyChanged("ConditionName");
					this.OnConditionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Condition_ConditionPopulation", Storage="_ConditionPopulations", ThisKey="ConditionId", OtherKey="ConditionId")]
		public EntitySet<ConditionPopulation> ConditionPopulations
		{
			get
			{
				return this._ConditionPopulations;
			}
			set
			{
				this._ConditionPopulations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Condition_ProgramCondition", Storage="_ProgramConditions", ThisKey="ConditionId", OtherKey="ConditionId")]
		public EntitySet<ProgramCondition> ProgramConditions
		{
			get
			{
				return this._ProgramConditions;
			}
			set
			{
				this._ProgramConditions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConditionPopulations(ConditionPopulation entity)
		{
			this.SendPropertyChanging();
			entity.Condition = this;
		}
		
		private void detach_ConditionPopulations(ConditionPopulation entity)
		{
			this.SendPropertyChanging();
			entity.Condition = null;
		}
		
		private void attach_ProgramConditions(ProgramCondition entity)
		{
			this.SendPropertyChanging();
			entity.Condition = this;
		}
		
		private void detach_ProgramConditions(ProgramCondition entity)
		{
			this.SendPropertyChanging();
			entity.Condition = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConditionPopulation")]
	public partial class ConditionPopulation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ConditionPopulationId;
		
		private int _ConditionId;
		
		private int _PopulationId;
		
		private EntitySet<Measure> _Measures;
		
		private EntityRef<Condition> _Condition;
		
		private EntityRef<Population> _Population;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConditionPopulationIdChanging(int value);
    partial void OnConditionPopulationIdChanged();
    partial void OnConditionIdChanging(int value);
    partial void OnConditionIdChanged();
    partial void OnPopulationIdChanging(int value);
    partial void OnPopulationIdChanged();
    #endregion
		
		public ConditionPopulation()
		{
			this._Measures = new EntitySet<Measure>(new Action<Measure>(this.attach_Measures), new Action<Measure>(this.detach_Measures));
			this._Condition = default(EntityRef<Condition>);
			this._Population = default(EntityRef<Population>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConditionPopulationId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ConditionPopulationId
		{
			get
			{
				return this._ConditionPopulationId;
			}
			set
			{
				if ((this._ConditionPopulationId != value))
				{
					this.OnConditionPopulationIdChanging(value);
					this.SendPropertyChanging();
					this._ConditionPopulationId = value;
					this.SendPropertyChanged("ConditionPopulationId");
					this.OnConditionPopulationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConditionId", DbType="Int NOT NULL")]
		public int ConditionId
		{
			get
			{
				return this._ConditionId;
			}
			set
			{
				if ((this._ConditionId != value))
				{
					if (this._Condition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConditionIdChanging(value);
					this.SendPropertyChanging();
					this._ConditionId = value;
					this.SendPropertyChanged("ConditionId");
					this.OnConditionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PopulationId", DbType="Int NOT NULL")]
		public int PopulationId
		{
			get
			{
				return this._PopulationId;
			}
			set
			{
				if ((this._PopulationId != value))
				{
					if (this._Population.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPopulationIdChanging(value);
					this.SendPropertyChanging();
					this._PopulationId = value;
					this.SendPropertyChanged("PopulationId");
					this.OnPopulationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConditionPopulation_Measure", Storage="_Measures", ThisKey="ConditionPopulationId", OtherKey="ConditionPopulationId")]
		public EntitySet<Measure> Measures
		{
			get
			{
				return this._Measures;
			}
			set
			{
				this._Measures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Condition_ConditionPopulation", Storage="_Condition", ThisKey="ConditionId", OtherKey="ConditionId", IsForeignKey=true)]
		public Condition Condition
		{
			get
			{
				return this._Condition.Entity;
			}
			set
			{
				Condition previousValue = this._Condition.Entity;
				if (((previousValue != value) 
							|| (this._Condition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Condition.Entity = null;
						previousValue.ConditionPopulations.Remove(this);
					}
					this._Condition.Entity = value;
					if ((value != null))
					{
						value.ConditionPopulations.Add(this);
						this._ConditionId = value.ConditionId;
					}
					else
					{
						this._ConditionId = default(int);
					}
					this.SendPropertyChanged("Condition");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Population_ConditionPopulation", Storage="_Population", ThisKey="PopulationId", OtherKey="PopulationId", IsForeignKey=true)]
		public Population Population
		{
			get
			{
				return this._Population.Entity;
			}
			set
			{
				Population previousValue = this._Population.Entity;
				if (((previousValue != value) 
							|| (this._Population.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Population.Entity = null;
						previousValue.ConditionPopulations.Remove(this);
					}
					this._Population.Entity = value;
					if ((value != null))
					{
						value.ConditionPopulations.Add(this);
						this._PopulationId = value.PopulationId;
					}
					else
					{
						this._PopulationId = default(int);
					}
					this.SendPropertyChanged("Population");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Measures(Measure entity)
		{
			this.SendPropertyChanging();
			entity.ConditionPopulation = this;
		}
		
		private void detach_Measures(Measure entity)
		{
			this.SendPropertyChanging();
			entity.ConditionPopulation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contract")]
	public partial class Contract : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContractId;
		
		private string _ContractName;
		
		private EntitySet<ContractGroup> _ContractGroups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContractIdChanging(int value);
    partial void OnContractIdChanged();
    partial void OnContractNameChanging(string value);
    partial void OnContractNameChanged();
    #endregion
		
		public Contract()
		{
			this._ContractGroups = new EntitySet<ContractGroup>(new Action<ContractGroup>(this.attach_ContractGroups), new Action<ContractGroup>(this.detach_ContractGroups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ContractId
		{
			get
			{
				return this._ContractId;
			}
			set
			{
				if ((this._ContractId != value))
				{
					this.OnContractIdChanging(value);
					this.SendPropertyChanging();
					this._ContractId = value;
					this.SendPropertyChanged("ContractId");
					this.OnContractIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ContractName
		{
			get
			{
				return this._ContractName;
			}
			set
			{
				if ((this._ContractName != value))
				{
					this.OnContractNameChanging(value);
					this.SendPropertyChanging();
					this._ContractName = value;
					this.SendPropertyChanged("ContractName");
					this.OnContractNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contract_ContractGroup", Storage="_ContractGroups", ThisKey="ContractId", OtherKey="ContractId")]
		public EntitySet<ContractGroup> ContractGroups
		{
			get
			{
				return this._ContractGroups;
			}
			set
			{
				this._ContractGroups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContractGroups(ContractGroup entity)
		{
			this.SendPropertyChanging();
			entity.Contract = this;
		}
		
		private void detach_ContractGroups(ContractGroup entity)
		{
			this.SendPropertyChanging();
			entity.Contract = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContractGroup")]
	public partial class ContractGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContractGroupId;
		
		private int _ContractId;
		
		private int _GroupId;
		
		private EntitySet<ContractGroupProgram> _ContractGroupPrograms;
		
		private EntityRef<Contract> _Contract;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContractGroupIdChanging(int value);
    partial void OnContractGroupIdChanged();
    partial void OnContractIdChanging(int value);
    partial void OnContractIdChanged();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    #endregion
		
		public ContractGroup()
		{
			this._ContractGroupPrograms = new EntitySet<ContractGroupProgram>(new Action<ContractGroupProgram>(this.attach_ContractGroupPrograms), new Action<ContractGroupProgram>(this.detach_ContractGroupPrograms));
			this._Contract = default(EntityRef<Contract>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractGroupId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ContractGroupId
		{
			get
			{
				return this._ContractGroupId;
			}
			set
			{
				if ((this._ContractGroupId != value))
				{
					this.OnContractGroupIdChanging(value);
					this.SendPropertyChanging();
					this._ContractGroupId = value;
					this.SendPropertyChanged("ContractGroupId");
					this.OnContractGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractId", DbType="Int NOT NULL")]
		public int ContractId
		{
			get
			{
				return this._ContractId;
			}
			set
			{
				if ((this._ContractId != value))
				{
					if (this._Contract.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractIdChanging(value);
					this.SendPropertyChanging();
					this._ContractId = value;
					this.SendPropertyChanged("ContractId");
					this.OnContractIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int NOT NULL")]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContractGroup_ContractGroupProgram", Storage="_ContractGroupPrograms", ThisKey="ContractGroupId", OtherKey="ContractGroupId")]
		public EntitySet<ContractGroupProgram> ContractGroupPrograms
		{
			get
			{
				return this._ContractGroupPrograms;
			}
			set
			{
				this._ContractGroupPrograms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contract_ContractGroup", Storage="_Contract", ThisKey="ContractId", OtherKey="ContractId", IsForeignKey=true)]
		public Contract Contract
		{
			get
			{
				return this._Contract.Entity;
			}
			set
			{
				Contract previousValue = this._Contract.Entity;
				if (((previousValue != value) 
							|| (this._Contract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contract.Entity = null;
						previousValue.ContractGroups.Remove(this);
					}
					this._Contract.Entity = value;
					if ((value != null))
					{
						value.ContractGroups.Add(this);
						this._ContractId = value.ContractId;
					}
					else
					{
						this._ContractId = default(int);
					}
					this.SendPropertyChanged("Contract");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContractGroupPrograms(ContractGroupProgram entity)
		{
			this.SendPropertyChanging();
			entity.ContractGroup = this;
		}
		
		private void detach_ContractGroupPrograms(ContractGroupProgram entity)
		{
			this.SendPropertyChanging();
			entity.ContractGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContractGroupProgram")]
	public partial class ContractGroupProgram : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContractGroupProgramId;
		
		private int _ContractGroupId;
		
		private int _ProgramId;
		
		private EntityRef<ContractGroup> _ContractGroup;
		
		private EntityRef<Program> _Program;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContractGroupProgramIdChanging(int value);
    partial void OnContractGroupProgramIdChanged();
    partial void OnContractGroupIdChanging(int value);
    partial void OnContractGroupIdChanged();
    partial void OnProgramIdChanging(int value);
    partial void OnProgramIdChanged();
    #endregion
		
		public ContractGroupProgram()
		{
			this._ContractGroup = default(EntityRef<ContractGroup>);
			this._Program = default(EntityRef<Program>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractGroupProgramId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ContractGroupProgramId
		{
			get
			{
				return this._ContractGroupProgramId;
			}
			set
			{
				if ((this._ContractGroupProgramId != value))
				{
					this.OnContractGroupProgramIdChanging(value);
					this.SendPropertyChanging();
					this._ContractGroupProgramId = value;
					this.SendPropertyChanged("ContractGroupProgramId");
					this.OnContractGroupProgramIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractGroupId", DbType="Int NOT NULL")]
		public int ContractGroupId
		{
			get
			{
				return this._ContractGroupId;
			}
			set
			{
				if ((this._ContractGroupId != value))
				{
					if (this._ContractGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractGroupIdChanging(value);
					this.SendPropertyChanging();
					this._ContractGroupId = value;
					this.SendPropertyChanged("ContractGroupId");
					this.OnContractGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramId", DbType="Int NOT NULL")]
		public int ProgramId
		{
			get
			{
				return this._ProgramId;
			}
			set
			{
				if ((this._ProgramId != value))
				{
					if (this._Program.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProgramIdChanging(value);
					this.SendPropertyChanging();
					this._ProgramId = value;
					this.SendPropertyChanged("ProgramId");
					this.OnProgramIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContractGroup_ContractGroupProgram", Storage="_ContractGroup", ThisKey="ContractGroupId", OtherKey="ContractGroupId", IsForeignKey=true)]
		public ContractGroup ContractGroup
		{
			get
			{
				return this._ContractGroup.Entity;
			}
			set
			{
				ContractGroup previousValue = this._ContractGroup.Entity;
				if (((previousValue != value) 
							|| (this._ContractGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContractGroup.Entity = null;
						previousValue.ContractGroupPrograms.Remove(this);
					}
					this._ContractGroup.Entity = value;
					if ((value != null))
					{
						value.ContractGroupPrograms.Add(this);
						this._ContractGroupId = value.ContractGroupId;
					}
					else
					{
						this._ContractGroupId = default(int);
					}
					this.SendPropertyChanged("ContractGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Program_ContractGroupProgram", Storage="_Program", ThisKey="ProgramId", OtherKey="ProgramId", IsForeignKey=true)]
		public Program Program
		{
			get
			{
				return this._Program.Entity;
			}
			set
			{
				Program previousValue = this._Program.Entity;
				if (((previousValue != value) 
							|| (this._Program.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Program.Entity = null;
						previousValue.ContractGroupPrograms.Remove(this);
					}
					this._Program.Entity = value;
					if ((value != null))
					{
						value.ContractGroupPrograms.Add(this);
						this._ProgramId = value.ProgramId;
					}
					else
					{
						this._ProgramId = default(int);
					}
					this.SendPropertyChanged("Program");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Group]")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupId;
		
		private string _Name;
		
		private EntitySet<GroupSubscriber> _GroupSubscribers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Group()
		{
			this._GroupSubscribers = new EntitySet<GroupSubscriber>(new Action<GroupSubscriber>(this.attach_GroupSubscribers), new Action<GroupSubscriber>(this.detach_GroupSubscribers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GroupSubscriber", Storage="_GroupSubscribers", ThisKey="GroupId", OtherKey="GroupId")]
		public EntitySet<GroupSubscriber> GroupSubscribers
		{
			get
			{
				return this._GroupSubscribers;
			}
			set
			{
				this._GroupSubscribers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupSubscribers(GroupSubscriber entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_GroupSubscribers(GroupSubscriber entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupSubscriber")]
	public partial class GroupSubscriber : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupSubscriberId;
		
		private int _GroupId;
		
		private int _SubscriberId;
		
		private EntitySet<ComparisonDataItem> _ComparisonDataItems;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<Subscriber> _Subscriber;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupSubscriberIdChanging(int value);
    partial void OnGroupSubscriberIdChanged();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    partial void OnSubscriberIdChanging(int value);
    partial void OnSubscriberIdChanged();
    #endregion
		
		public GroupSubscriber()
		{
			this._ComparisonDataItems = new EntitySet<ComparisonDataItem>(new Action<ComparisonDataItem>(this.attach_ComparisonDataItems), new Action<ComparisonDataItem>(this.detach_ComparisonDataItems));
			this._Group = default(EntityRef<Group>);
			this._Subscriber = default(EntityRef<Subscriber>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupSubscriberId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GroupSubscriberId
		{
			get
			{
				return this._GroupSubscriberId;
			}
			set
			{
				if ((this._GroupSubscriberId != value))
				{
					this.OnGroupSubscriberIdChanging(value);
					this.SendPropertyChanging();
					this._GroupSubscriberId = value;
					this.SendPropertyChanged("GroupSubscriberId");
					this.OnGroupSubscriberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int NOT NULL")]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriberId", DbType="Int NOT NULL")]
		public int SubscriberId
		{
			get
			{
				return this._SubscriberId;
			}
			set
			{
				if ((this._SubscriberId != value))
				{
					if (this._Subscriber.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubscriberIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriberId = value;
					this.SendPropertyChanged("SubscriberId");
					this.OnSubscriberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupSubscriber_ComparisonDataItem", Storage="_ComparisonDataItems", ThisKey="GroupSubscriberId", OtherKey="GroupId")]
		public EntitySet<ComparisonDataItem> ComparisonDataItems
		{
			get
			{
				return this._ComparisonDataItems;
			}
			set
			{
				this._ComparisonDataItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GroupSubscriber", Storage="_Group", ThisKey="GroupId", OtherKey="GroupId", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.GroupSubscribers.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.GroupSubscribers.Add(this);
						this._GroupId = value.GroupId;
					}
					else
					{
						this._GroupId = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subscriber_GroupSubscriber", Storage="_Subscriber", ThisKey="SubscriberId", OtherKey="SubscriberId", IsForeignKey=true)]
		public Subscriber Subscriber
		{
			get
			{
				return this._Subscriber.Entity;
			}
			set
			{
				Subscriber previousValue = this._Subscriber.Entity;
				if (((previousValue != value) 
							|| (this._Subscriber.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subscriber.Entity = null;
						previousValue.GroupSubscribers.Remove(this);
					}
					this._Subscriber.Entity = value;
					if ((value != null))
					{
						value.GroupSubscribers.Add(this);
						this._SubscriberId = value.SubscriberId;
					}
					else
					{
						this._SubscriberId = default(int);
					}
					this.SendPropertyChanged("Subscriber");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ComparisonDataItems(ComparisonDataItem entity)
		{
			this.SendPropertyChanging();
			entity.GroupSubscriber = this;
		}
		
		private void detach_ComparisonDataItems(ComparisonDataItem entity)
		{
			this.SendPropertyChanging();
			entity.GroupSubscriber = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Measure")]
	public partial class Measure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MeasureId;
		
		private int _ConditionPopulationId;
		
		private string _MeasureName;
		
		private EntitySet<ComparisonDataItemMeasure> _ComparisonDataItemMeasures;
		
		private EntityRef<ConditionPopulation> _ConditionPopulation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMeasureIdChanging(int value);
    partial void OnMeasureIdChanged();
    partial void OnConditionPopulationIdChanging(int value);
    partial void OnConditionPopulationIdChanged();
    partial void OnMeasureNameChanging(string value);
    partial void OnMeasureNameChanged();
    #endregion
		
		public Measure()
		{
			this._ComparisonDataItemMeasures = new EntitySet<ComparisonDataItemMeasure>(new Action<ComparisonDataItemMeasure>(this.attach_ComparisonDataItemMeasures), new Action<ComparisonDataItemMeasure>(this.detach_ComparisonDataItemMeasures));
			this._ConditionPopulation = default(EntityRef<ConditionPopulation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasureId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MeasureId
		{
			get
			{
				return this._MeasureId;
			}
			set
			{
				if ((this._MeasureId != value))
				{
					this.OnMeasureIdChanging(value);
					this.SendPropertyChanging();
					this._MeasureId = value;
					this.SendPropertyChanged("MeasureId");
					this.OnMeasureIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConditionPopulationId", DbType="Int NOT NULL")]
		public int ConditionPopulationId
		{
			get
			{
				return this._ConditionPopulationId;
			}
			set
			{
				if ((this._ConditionPopulationId != value))
				{
					if (this._ConditionPopulation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConditionPopulationIdChanging(value);
					this.SendPropertyChanging();
					this._ConditionPopulationId = value;
					this.SendPropertyChanged("ConditionPopulationId");
					this.OnConditionPopulationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasureName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MeasureName
		{
			get
			{
				return this._MeasureName;
			}
			set
			{
				if ((this._MeasureName != value))
				{
					this.OnMeasureNameChanging(value);
					this.SendPropertyChanging();
					this._MeasureName = value;
					this.SendPropertyChanged("MeasureName");
					this.OnMeasureNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Measure_ComparisonDataItemMeasure", Storage="_ComparisonDataItemMeasures", ThisKey="MeasureId", OtherKey="MeasureId")]
		public EntitySet<ComparisonDataItemMeasure> ComparisonDataItemMeasures
		{
			get
			{
				return this._ComparisonDataItemMeasures;
			}
			set
			{
				this._ComparisonDataItemMeasures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConditionPopulation_Measure", Storage="_ConditionPopulation", ThisKey="ConditionPopulationId", OtherKey="ConditionPopulationId", IsForeignKey=true)]
		public ConditionPopulation ConditionPopulation
		{
			get
			{
				return this._ConditionPopulation.Entity;
			}
			set
			{
				ConditionPopulation previousValue = this._ConditionPopulation.Entity;
				if (((previousValue != value) 
							|| (this._ConditionPopulation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ConditionPopulation.Entity = null;
						previousValue.Measures.Remove(this);
					}
					this._ConditionPopulation.Entity = value;
					if ((value != null))
					{
						value.Measures.Add(this);
						this._ConditionPopulationId = value.ConditionPopulationId;
					}
					else
					{
						this._ConditionPopulationId = default(int);
					}
					this.SendPropertyChanged("ConditionPopulation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ComparisonDataItemMeasures(ComparisonDataItemMeasure entity)
		{
			this.SendPropertyChanging();
			entity.Measure = this;
		}
		
		private void detach_ComparisonDataItemMeasures(ComparisonDataItemMeasure entity)
		{
			this.SendPropertyChanging();
			entity.Measure = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PatientId;
		
		private string _PatientName;
		
		private string _ClientPatientId;
		
		private System.DateTime _DateOfBirth;
		
		private string _Gender;
		
		private string _Phone;
		
		private string _Email;
		
		private EntitySet<SubscriberPatient> _SubscriberPatients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientIdChanging(int value);
    partial void OnPatientIdChanged();
    partial void OnPatientNameChanging(string value);
    partial void OnPatientNameChanged();
    partial void OnClientPatientIdChanging(string value);
    partial void OnClientPatientIdChanged();
    partial void OnDateOfBirthChanging(System.DateTime value);
    partial void OnDateOfBirthChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Patient()
		{
			this._SubscriberPatients = new EntitySet<SubscriberPatient>(new Action<SubscriberPatient>(this.attach_SubscriberPatients), new Action<SubscriberPatient>(this.detach_SubscriberPatients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PatientName
		{
			get
			{
				return this._PatientName;
			}
			set
			{
				if ((this._PatientName != value))
				{
					this.OnPatientNameChanging(value);
					this.SendPropertyChanging();
					this._PatientName = value;
					this.SendPropertyChanged("PatientName");
					this.OnPatientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientPatientId", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ClientPatientId
		{
			get
			{
				return this._ClientPatientId;
			}
			set
			{
				if ((this._ClientPatientId != value))
				{
					this.OnClientPatientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientPatientId = value;
					this.SendPropertyChanged("ClientPatientId");
					this.OnClientPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date NOT NULL")]
		public System.DateTime DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_SubscriberPatient", Storage="_SubscriberPatients", ThisKey="PatientId", OtherKey="PatientId")]
		public EntitySet<SubscriberPatient> SubscriberPatients
		{
			get
			{
				return this._SubscriberPatients;
			}
			set
			{
				this._SubscriberPatients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubscriberPatients(SubscriberPatient entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_SubscriberPatients(SubscriberPatient entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Population")]
	public partial class Population : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PopulationId;
		
		private string _PopulationName;
		
		private EntitySet<ConditionPopulation> _ConditionPopulations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPopulationIdChanging(int value);
    partial void OnPopulationIdChanged();
    partial void OnPopulationNameChanging(string value);
    partial void OnPopulationNameChanged();
    #endregion
		
		public Population()
		{
			this._ConditionPopulations = new EntitySet<ConditionPopulation>(new Action<ConditionPopulation>(this.attach_ConditionPopulations), new Action<ConditionPopulation>(this.detach_ConditionPopulations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PopulationId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PopulationId
		{
			get
			{
				return this._PopulationId;
			}
			set
			{
				if ((this._PopulationId != value))
				{
					this.OnPopulationIdChanging(value);
					this.SendPropertyChanging();
					this._PopulationId = value;
					this.SendPropertyChanged("PopulationId");
					this.OnPopulationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PopulationName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PopulationName
		{
			get
			{
				return this._PopulationName;
			}
			set
			{
				if ((this._PopulationName != value))
				{
					this.OnPopulationNameChanging(value);
					this.SendPropertyChanging();
					this._PopulationName = value;
					this.SendPropertyChanged("PopulationName");
					this.OnPopulationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Population_ConditionPopulation", Storage="_ConditionPopulations", ThisKey="PopulationId", OtherKey="PopulationId")]
		public EntitySet<ConditionPopulation> ConditionPopulations
		{
			get
			{
				return this._ConditionPopulations;
			}
			set
			{
				this._ConditionPopulations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConditionPopulations(ConditionPopulation entity)
		{
			this.SendPropertyChanging();
			entity.Population = this;
		}
		
		private void detach_ConditionPopulations(ConditionPopulation entity)
		{
			this.SendPropertyChanging();
			entity.Population = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Program")]
	public partial class Program : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProgramId;
		
		private string _ProgramName;
		
		private EntitySet<ContractGroupProgram> _ContractGroupPrograms;
		
		private EntitySet<ProgramCondition> _ProgramConditions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProgramIdChanging(int value);
    partial void OnProgramIdChanged();
    partial void OnProgramNameChanging(string value);
    partial void OnProgramNameChanged();
    #endregion
		
		public Program()
		{
			this._ContractGroupPrograms = new EntitySet<ContractGroupProgram>(new Action<ContractGroupProgram>(this.attach_ContractGroupPrograms), new Action<ContractGroupProgram>(this.detach_ContractGroupPrograms));
			this._ProgramConditions = new EntitySet<ProgramCondition>(new Action<ProgramCondition>(this.attach_ProgramConditions), new Action<ProgramCondition>(this.detach_ProgramConditions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProgramId
		{
			get
			{
				return this._ProgramId;
			}
			set
			{
				if ((this._ProgramId != value))
				{
					this.OnProgramIdChanging(value);
					this.SendPropertyChanging();
					this._ProgramId = value;
					this.SendPropertyChanged("ProgramId");
					this.OnProgramIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ProgramName
		{
			get
			{
				return this._ProgramName;
			}
			set
			{
				if ((this._ProgramName != value))
				{
					this.OnProgramNameChanging(value);
					this.SendPropertyChanging();
					this._ProgramName = value;
					this.SendPropertyChanged("ProgramName");
					this.OnProgramNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Program_ContractGroupProgram", Storage="_ContractGroupPrograms", ThisKey="ProgramId", OtherKey="ProgramId")]
		public EntitySet<ContractGroupProgram> ContractGroupPrograms
		{
			get
			{
				return this._ContractGroupPrograms;
			}
			set
			{
				this._ContractGroupPrograms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Program_ProgramCondition", Storage="_ProgramConditions", ThisKey="ProgramId", OtherKey="ProgramId")]
		public EntitySet<ProgramCondition> ProgramConditions
		{
			get
			{
				return this._ProgramConditions;
			}
			set
			{
				this._ProgramConditions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContractGroupPrograms(ContractGroupProgram entity)
		{
			this.SendPropertyChanging();
			entity.Program = this;
		}
		
		private void detach_ContractGroupPrograms(ContractGroupProgram entity)
		{
			this.SendPropertyChanging();
			entity.Program = null;
		}
		
		private void attach_ProgramConditions(ProgramCondition entity)
		{
			this.SendPropertyChanging();
			entity.Program = this;
		}
		
		private void detach_ProgramConditions(ProgramCondition entity)
		{
			this.SendPropertyChanging();
			entity.Program = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProgramCondition")]
	public partial class ProgramCondition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProgramConditionId;
		
		private int _ProgramId;
		
		private int _ConditionId;
		
		private EntityRef<Condition> _Condition;
		
		private EntityRef<Program> _Program;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProgramConditionIdChanging(int value);
    partial void OnProgramConditionIdChanged();
    partial void OnProgramIdChanging(int value);
    partial void OnProgramIdChanged();
    partial void OnConditionIdChanging(int value);
    partial void OnConditionIdChanged();
    #endregion
		
		public ProgramCondition()
		{
			this._Condition = default(EntityRef<Condition>);
			this._Program = default(EntityRef<Program>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramConditionId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProgramConditionId
		{
			get
			{
				return this._ProgramConditionId;
			}
			set
			{
				if ((this._ProgramConditionId != value))
				{
					this.OnProgramConditionIdChanging(value);
					this.SendPropertyChanging();
					this._ProgramConditionId = value;
					this.SendPropertyChanged("ProgramConditionId");
					this.OnProgramConditionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramId", DbType="Int NOT NULL")]
		public int ProgramId
		{
			get
			{
				return this._ProgramId;
			}
			set
			{
				if ((this._ProgramId != value))
				{
					if (this._Program.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProgramIdChanging(value);
					this.SendPropertyChanging();
					this._ProgramId = value;
					this.SendPropertyChanged("ProgramId");
					this.OnProgramIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConditionId", DbType="Int NOT NULL")]
		public int ConditionId
		{
			get
			{
				return this._ConditionId;
			}
			set
			{
				if ((this._ConditionId != value))
				{
					if (this._Condition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConditionIdChanging(value);
					this.SendPropertyChanging();
					this._ConditionId = value;
					this.SendPropertyChanged("ConditionId");
					this.OnConditionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Condition_ProgramCondition", Storage="_Condition", ThisKey="ConditionId", OtherKey="ConditionId", IsForeignKey=true)]
		public Condition Condition
		{
			get
			{
				return this._Condition.Entity;
			}
			set
			{
				Condition previousValue = this._Condition.Entity;
				if (((previousValue != value) 
							|| (this._Condition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Condition.Entity = null;
						previousValue.ProgramConditions.Remove(this);
					}
					this._Condition.Entity = value;
					if ((value != null))
					{
						value.ProgramConditions.Add(this);
						this._ConditionId = value.ConditionId;
					}
					else
					{
						this._ConditionId = default(int);
					}
					this.SendPropertyChanged("Condition");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Program_ProgramCondition", Storage="_Program", ThisKey="ProgramId", OtherKey="ProgramId", IsForeignKey=true)]
		public Program Program
		{
			get
			{
				return this._Program.Entity;
			}
			set
			{
				Program previousValue = this._Program.Entity;
				if (((previousValue != value) 
							|| (this._Program.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Program.Entity = null;
						previousValue.ProgramConditions.Remove(this);
					}
					this._Program.Entity = value;
					if ((value != null))
					{
						value.ProgramConditions.Add(this);
						this._ProgramId = value.ProgramId;
					}
					else
					{
						this._ProgramId = default(int);
					}
					this.SendPropertyChanged("Program");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subscriber")]
	public partial class Subscriber : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubscriberId;
		
		private string _SubscriberName;
		
		private EntitySet<SubscriberPatient> _SubscriberPatients;
		
		private EntitySet<GroupSubscriber> _GroupSubscribers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubscriberIdChanging(int value);
    partial void OnSubscriberIdChanged();
    partial void OnSubscriberNameChanging(string value);
    partial void OnSubscriberNameChanged();
    #endregion
		
		public Subscriber()
		{
			this._SubscriberPatients = new EntitySet<SubscriberPatient>(new Action<SubscriberPatient>(this.attach_SubscriberPatients), new Action<SubscriberPatient>(this.detach_SubscriberPatients));
			this._GroupSubscribers = new EntitySet<GroupSubscriber>(new Action<GroupSubscriber>(this.attach_GroupSubscribers), new Action<GroupSubscriber>(this.detach_GroupSubscribers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriberId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SubscriberId
		{
			get
			{
				return this._SubscriberId;
			}
			set
			{
				if ((this._SubscriberId != value))
				{
					this.OnSubscriberIdChanging(value);
					this.SendPropertyChanging();
					this._SubscriberId = value;
					this.SendPropertyChanged("SubscriberId");
					this.OnSubscriberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriberName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SubscriberName
		{
			get
			{
				return this._SubscriberName;
			}
			set
			{
				if ((this._SubscriberName != value))
				{
					this.OnSubscriberNameChanging(value);
					this.SendPropertyChanging();
					this._SubscriberName = value;
					this.SendPropertyChanged("SubscriberName");
					this.OnSubscriberNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subscriber_SubscriberPatient", Storage="_SubscriberPatients", ThisKey="SubscriberId", OtherKey="SubscriberId")]
		public EntitySet<SubscriberPatient> SubscriberPatients
		{
			get
			{
				return this._SubscriberPatients;
			}
			set
			{
				this._SubscriberPatients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subscriber_GroupSubscriber", Storage="_GroupSubscribers", ThisKey="SubscriberId", OtherKey="SubscriberId")]
		public EntitySet<GroupSubscriber> GroupSubscribers
		{
			get
			{
				return this._GroupSubscribers;
			}
			set
			{
				this._GroupSubscribers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubscriberPatients(SubscriberPatient entity)
		{
			this.SendPropertyChanging();
			entity.Subscriber = this;
		}
		
		private void detach_SubscriberPatients(SubscriberPatient entity)
		{
			this.SendPropertyChanging();
			entity.Subscriber = null;
		}
		
		private void attach_GroupSubscribers(GroupSubscriber entity)
		{
			this.SendPropertyChanging();
			entity.Subscriber = this;
		}
		
		private void detach_GroupSubscribers(GroupSubscriber entity)
		{
			this.SendPropertyChanging();
			entity.Subscriber = null;
		}
	}
}
#pragma warning restore 1591
