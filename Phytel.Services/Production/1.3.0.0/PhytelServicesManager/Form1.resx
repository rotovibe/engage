<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAEAGABoAwAAJgAAACAgAAABABgAqAwAAI4DAAAoAAAAEAAAACAAAAABABgAAAAAAEAD
        AAAAAAAAAAAAAAAAAAAAAAAAq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10A
        q10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aql0B
        rWIGrmEKq1wBql0Aq10Aq10Aq14Aq10Aq10Aq10Aq1wBq1wBq10Aq10Aq10Aq1wB5tC06dW8rF0CqlwA
        qVwArF4Bq1wBq10Aq10Aql0Aql0Aql0Aq10Aq10Aql0AqlwC8eXT8+veqV4CqVwAq10Aq1wBq10Aq10A
        q10Aq10Aq10Aq10Aql0Aql0AqVsBqlsA7uDO8ebYql0Gp1YBqVMAplUApVQAplIAplIAp1MBplUAqVkA
        q1wBq14AqF0BqVsB8eHR9OfXqVkCyZhg27uY2reV2bmV2LGK0qp6y55lvolGtmscql0Bq10AqV0AsFwD
        7uDO8efWplQD5Myu///////+//7////+//7///7+////7drFrF8DqVoAqlsAqlwC7+HO8OXXo1ACs28c
        un44vHw1vH0zu302woZEyZJZ9e/q9OvdrGAGqlsAql0Aq1wB79/S9vHoxo1QunoztnEism0dsm0dtXIj
        uHkvu4JE+Ozi8+zdr2EHqloBql0Bq1wB6tnE//////7+///+/f////////7///3+///////+/P3/8uPQ
        rmAGqloDsF4AqVoAuXYrzJZf1a193buX38Ok5cqw4Mmv4cOm3ryY1q5+yJdfuHkvqVwAqF4ArFwDqV0A
        qFgAp1QApVUApFQApVYAplYAqFUAplUApVQAplQCp1QAp1YBq1wBql0Aq10Aq10Aq10Aq10Aq10Aq10A
        q10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10Aq10A
        q10Aq10Aq10Aq10Aq10Aq10Aq10Aq1wBql0Aql0AqlsAq1wBr1wAq1wBq10AqVwAq10Aq1wBql0Aq1sC
        rFwAq10AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAACgAAAAgAAAAQAAAAAEAGAAAAAAAgAwAAAAAAAAAAAAAAAAAAAAAAACrXQCrXQCrXQCr
        XQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCr
        XQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCr
        XQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCr
        XQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCr
        XQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCr
        XQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCr
        XQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCr
        XQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCr
        XQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCr
        XQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCsXgGrXAGqXQGrXQCrWgCnWQCsWQOpWQCrXAGrXQCsXgGr
        XQCrXAGrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCr
        XQCqWwCsXwCqXgCtXgCuYw2zbBWyahaxaA2qWwCrXQCsXgGrXQCrXAGrXQCrXQCrXQCrXQCrXQCrXQCr
        XQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCqXQCrXQCqXACrWQDcuZH69+/49O/i
        wp+pWgCrXQCrXQCrXQCrXAGrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCr
        XQCrXQCrXQCrXQCrXQCqXQCtXQCqXQCnWQDfw6D////9/v/n0rapWQCrXAGrXQCrXQCrXAGrXQCrXQCr
        XQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCqWwCrXAGsWwCo
        WADhwqH//////v/m0LSoWACrXAGrXQCrXQCrXAGrXQCsXgGrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCr
        XQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCtXQCoXgCqXACpWgDgwp/9//7////l0bKoWACrXAGrXQCr
        XQCrXAGrXQCrXQCrXAGrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCr
        XQCqXgCqXQGqWwCqWADexKD9/////v/mz7WpWQCsXQKrXQCqXACrXAGqXACrXQCqWwCrXQCrXQCrXQCr
        XQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCqXQGqXQCrXQCpWQDfw6D//v/////m
        0LSpWQCtXQCpXACoWAGmVwCnVwCmVwCnVwCnVwCnVwCmVQCoUgCmUgClUwGnVgGqWACpWwCrXgGqXQGt
        XQCrXAGpXACpXwGsXACqWwCsXgGrXQCoWADewp/+/f/////m0LSoWgCqVwK7ey3cv5rduJLbuJDZuY7c
        uZHct5HdupLWsYXLo3LQpG7HmFvDjEm6fji2bR2rXgKnWAGnVwCqXQGtXgCrXQCsXQKrXQCrXgCqXACp
        WQDfw6D//v/////l0LSoWAClUwHHkVT//v////7//////v////7////////////+/v7//////v7//v3/
        +vn58+zy5dXiyafEkE6sWwCsXACqXQCqXAKrXQCrXQCrXQCoWADewp/////////n0bWrWgCoUgDGkFP/
        //79//////7////8//3+/f/////////////+/v7//////v///v///v/9///9///q072pXQOsWwCrXAGq
        XQCqWwCqXQCqWwCpWQDfw6D//////v7m0LSnWAGqVADDjEn49O/16d3z6uH06dv06uDz6970697z6t31
        7OL68+r48uv7+/X8/fv//////v////7o1r+tYQepXACqXQCrXQCqXQGrXgGqWwCpWQDew57+/v7////m
        z7WoWwCrXQCoXgCqXQCqXQCqXACrXQOqXACqXACqXACqWwCsXwi2bhqzcSC7fTHBhkDw4c7///79///r
        1bytXwWpWgCuXQKqXACqXQCqXQCqWwCoWADfxJ/////+/f/jzbSiUQCmVgCqWACnVgGoWACrWAKpWQCs
        WgGpWQCrWgCpWgCpWQKnVACpUwGoUAOeSQHgya////z9///r2L2pYASqXACqXQCoXgCsXgGrXQCqWwCo
        WADfxJ/8/v79///24cvDiUe8gjq4dCe4cyS0cB2yYwywZAquZAyuZAywZAquZAy2cB21cyK5dynAgjvD
        i0rq1r3//v///v/q1b+tYAOqWwCrXAGsXgGrXAGqXgCqWwCpWQLfw6D///7////9///9//////z49e37
        9Ov68Oby5try5trz59vz59vy5trz59v58Ob58+z59vL////9///////9///////s1b+sYAaoWgCqXQGr
        XQCrXgCqXQGrXAGmWQLhwqH////9/////v/////////////+/v79///9///////+/v7/////////////
        ///+/v7///////7///79/////v///v/u2b6tYQeqXACqXACsXgGrXQCrXwCtXQCtWgC/iEPgw5zr28r7
        9Ov8+/f+/v7//v/9///9///////+//3///7///7///7///78/v79/////////v7/+/r69O3t3czfw6DE
        k1WsXQCsXgGrXQCqXgCrXQCqXAKqXgCrXgCnVwCmVwCtYgawZwy1dynFiUPKlFfRpGvLpHDYtIbbuJDb
        t5HZuZDcuY7as4fMonPVpnDMllnFjUa2eS+zZg+rXwWoWQKlVgCtXQCoXQGtXQCrXAGqXQCtXQCtXQCq
        XQGtXQCuXgGpWgCqWwCnWgCoWAGmVAKkUwCoVQCmUgCmUgClUACkUQOjUQClUwGlVAClVACmVQCnVwCq
        VwGoWgCpWwCqXACrXQCqWwCqXQGqXgCqXQCqXQCrXQCqXQCpXwGuXgGrXAGqXQGrXQCrXQCqWwCqXQGr
        XgGqXQCpXACsXgGrXAGrXQCrXQCtXQCrXQCsXQKrXgKpXACqXQCqXQCuXQKtXAGrXQCsXgGqXACsXgGq
        XQGrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCr
        XQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCr
        XQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCr
        XQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCr
        XQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCrXQCpXQCrXAGrXAGr
        XgCpXACrXgGqXQCrXQCqXQCrXgGrXQCrXQCsXgGqXACqXQCqXQGqXQCqXQCrXgCsXwCqXACrXQCrXAGq
        WwCrXQCqXQCsXQKqXQGqXgCsXgGrXAGpXgKrXAGvXQCrXAGrXgCqXQGqXACuXgCrXgGrXAGrXgCrXgCr
        XAGrXAGrXQCqXACrXQCrXQCsXgGrXQCqXQCqXQCqXQCqXQCrXgCqXQGtXQCtXQCrXQOtXQCrXgCqXQGt
        XQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAA==
</value>
  </data>
</root>